import com.github.davidmc24.gradle.plugin.avro.GenerateAvroProtocolTask
import com.github.davidmc24.gradle.plugin.avro.GenerateAvroSchemaTask

buildscript {

	ext {
		set('springCloudVersion', "2021.0.3")
	}

}

plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id 'idea'
	id 'eclipse'
	id 'jacoco'
	id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}

apply plugin: 'jacoco'
apply plugin: "com.github.davidmc24.gradle.plugin.avro-base"

group = 'br.com.jcls'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	//simplementation 'org.springframework.cloud:spring-cloud-starter-config'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'mysql:mysql-connector-java'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation "org.apache.avro:avro:1.11.0"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'it.ozimov:embedded-redis:0.7.3'

	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.springframework.kafka:spring-kafka'
}

avro {
	fieldVisibility.set("PRIVATE")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.named('jar') {
	enabled = false
}
//configurations.all {
//	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//}

def generateProtocol = tasks.register("generateProtocol", GenerateAvroProtocolTask) {
	source file("src/main/avro")
	include("**/*.avdl")
	outputDir = file("build/generated-avro-main-avpr")
}

tasks.register("generateSchema", GenerateAvroSchemaTask) {
	dependsOn generateProtocol
	source file("src/main/avro")
	source file("build/generated-avro-main-avpr")
	include("**/*.avpr")
	outputDir = file("build/generated-main-avro-avsc")
}
